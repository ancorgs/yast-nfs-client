/**
 * File:
 *   ui.ycp
 *
 * Module:
 *   Configuration of nfs
 *
 * Summary:
 *   Network NFS client dialogs
 *
 * Authors:
 *   Jan Holesovsky <kendy@suse.cz>
 *   Dan Vesely <dan@suse.cz>
 *
 * $Id$
 *
 * Network NFS client dialogs
 *
 */

{
    textdomain "nfs";

    import "Nfs";
    include "nfs/routines.ycp";
    include "ui/file_popups.ycp";
    include "ui/common_popups.ycp";


    /**
     * Give me one name from the list of hosts
     * @param hosts	a list of hostnames
     * @return		a hostname
     */
    global define string ChooseHostName(list(string) hosts) ``{
	string hname = nil;

	UI::OpenDialog(
	    `VBox(`HSpacing(40),
		  `HBox(
		      // selection box label
		      `SelectionBox(`id(`hosts), _("&Remote hosts"), hosts),
		      `VSpacing(10)
		      ),
		  `HBox(`PushButton(`id(`ok), `opt(`default), OKButtonLabel()),
			`PushButton(`id(`cancel), CancelButtonLabel()))));
	any ret = nil;
	do
	{
	    ret = UI::UserInput();
	}
	while (ret != `cancel && ret != `ok);

	if (ret == `ok)
	{
	    hname = UI::QueryWidget(`id(`hosts), `CurrentItem);
	}
	UI::CloseDialog();

	return hname;
    };


    /**
     * Ask user for an entry.
     * @param fstab_ent	$["spec": "file": "mntopts":] or nil
     * @param existing	list of fstab entries for duplicate mount-point checking
     * @return		a nfs_entry or nil
     */
    global define map GetFstabEntry(map fstab_ent, list(map) existing) ``{
	string server = "";
	string pth = "";
	string mount = "";
	string options = "defaults";

	if (fstab_ent != nil)
	{
	    term couple = SpecToServPath(lookup(fstab_ent, "spec", ""));
	    server = select(couple, 0, "");
	    pth = select(couple, 1, "");
	    mount = lookup(fstab_ent, "file", "");
	    options = lookup(fstab_ent, "mntops", "");
	}

	UI::OpenDialog(`opt(`decorated),
		       `HBox(`HSpacing(1),
			     `VBox(`VSpacing(0.2),
				   `VSquash(`HBox(
				       `TextEntry(`id(`serverent),
						  // text entry label
						  _("Host name of the &NFS server:"), server),
				       `VBox(`VSpacing(),
					     // pushbutton label
					     `Bottom(`PushButton(`id(`choose), _("Choo&se")))))),
				   // textentry label
				   `HBox(`TextEntry(`id(`pathent), _("&Remote filesystem:"), pth),
					 `HSpacing(0.5),
					 `HBox (
					 // textentry label
					 `TextEntry(`id(`mountent), _("&Mountpoint (local):"), mount),
					 `VBox (`VSpacing (),
						`PushButton(`id(`browse), _("&Browse")))
					     )),
				   // textentry label
				   `TextEntry(`id(`optionsent), _("O&ptions:"), options),
				   `VSpacing(0.2),
				   // ok pushbutton: confirm the dialog
				   `HBox(`PushButton(`id(`ok), `opt(`default), OKButtonLabel()),
					 `PushButton(`id(`cancel), CancelButtonLabel()),
					 `PushButton(`id(`help), HelpButtonLabel())),
				   `VSpacing(0.2)),
			     `HSpacing(1)
			   ));
	UI::SetFocus (`id (`serverent));

	any ret = nil;
	do
	{
	    ret = UI::UserInput();

	    if (ret == `choose)
	    {
		if (hosts == nil)
		{
		    // label message
		    UI::OpenDialog(`Label(_("Scanning for hosts on this LAN...")));
		    hosts = sort(SCR::Read(.net.hostnames));
		    UI::CloseDialog();
		    if (hosts == nil) hosts = [];
		}
		string host = ChooseHostName(hosts);
		if (host != nil)
		{
		    UI::ChangeWidget(`id(`serverent), `Value, host);
		}
	    }
	    else if (ret == `browse)
	    {
		string dir = UI::QueryWidget(`id (`mountent), `Value);
		if (size (dir) == 0)
		{
		    dir = "/";
		}

		dir = PopupDir (dir);

		if (size (dir) > 0)
		{
		    UI::ChangeWidget (`id (`mountent), `Value, dir);
		}
	    }
	    else if (ret == `ok)
	    {
		server = UI::QueryWidget(`id(`serverent), `Value);
		pth = StripExtraSlash (UI::QueryWidget(`id(`pathent), `Value));
		mount = StripExtraSlash (UI::QueryWidget(`id(`mountent), `Value));
		options = deletechars (UI::QueryWidget(`id(`optionsent), `Value), " ");

		ret = nil;
		string options_error = check_options (options);
		if (!CheckHostName (server))
		{
		    UI::SetFocus (`id (`serverent));
		}
		else if (! CheckPath (pth))
		{
		    UI::SetFocus (`id (`pathent));
		}
		else if (! CheckPath (mount) || IsMpInFstab (existing, mount))
		{
		    UI::SetFocus (`id (`mountent));
		}
		else if (size (options_error) > 0)
		{
		    UI::ErrorPopup(options_error);
		    UI::SetFocus (`id (`optionsent));
		}
		else
		{
		    fstab_ent = $[
			"spec"    : server+":"+pth,
			"file"    : mount,
			"mntops"  : options,
			];
		    ret = `ok;
		}
	    }
	    else if (ret == `help)
	    {
		//help text 1/3
		string helptext = _("<p>Please enter the <b>hostname</b> of the NFS server; the
<i>Choose</i> button enables you to browse through a list of locally
defined hosts.</p>");
		// help text 2/3
		helptext = helptext + _("<p>You must also supply the directory on the remote NFS server and a
local <b>mountpoint</b>, on which the directory will be mounted. (With
the <i>Browse</i> button you can select your mount point
interactively)</p>");
		// help text 3/3
		helptext = helptext + _("<p>For a list of <b>Options</b> please read the manpage mount(8).</p>");

		UI::LongTextPopup (_("Help"), `RichText (helptext), 50, 15);
	    }
	}
	while (ret != `ok && ret != `cancel);

	UI::CloseDialog();

	if (ret == `ok)
	    return fstab_ent;
	return nil;
    };



    /**
     * NFS client dialog itselfs
     * @return `back, `abort or `next
     */
    global define symbol FstabDialog () ``{

	// Help, part 1 of 3
	string help_text = _("<P>The table contains all the NFS entries which will be written to /etc/fstab.
For changing the configuration please use the <B>Add</B>, <B>Edit</B> and
<B>Delete</B> buttons.</P>
");

	// Help, part 2 of 3; BackButtonLabel, FinishButtonLabel
	help_text = help_text + _("<P>To confirm the changes, press <B>Finish</B>. To dismiss them,
use <B>Back</B>.</P>\n");

	// Help, part 3 of 3
	help_text = help_text + _("<P>For further information about fstab please type <B>man fstab</B>
in a terminal.</P>
");

	list(map) nfs_entries = Nfs::nfs_entries;

	term contents =
	    `VBox(
		`Table(`id(`fstable), `opt(`notify, `immediate),
		       // table headers: "Server", "Remote filesystem", "Mountpoint", "Options"
		       `header(_("Server")+"  ", _("Remote filesystem")+"  ",
			       _("Mountpoint")+"  ", _("Options")+"  "),
		       FstabTableItems(nfs_entries)),
		// button label
		`HBox(`PushButton(`id(`newbut), _("A&dd")),
		      // button label
		      `PushButton(`id(`editbut), _("&Edit")),
		      // button label
		      `PushButton(`id(`delbut), _("De&lete"))),
		// frame label
		`VSpacing(0.2)
		);

	Wizard::SetContents(_("Configuration of the NFS client"),
			      contents, help_text, true, true);
	UI::ChangeWidget (`id(`next), `Label, FinishButtonLabel());

	UI::ChangeWidget (`id(`editbut), `Enabled, false);
	UI::ChangeWidget (`id(`delbut), `Enabled, false);

	any ret = nil;
	list hosts = nil;

	do
	{

	   integer entryno = UI::QueryWidget(`id(`fstable), `CurrentItem);
	   UI::ChangeWidget (`id(`editbut), `Enabled, entryno != nil);
	   UI::ChangeWidget (`id(`delbut), `Enabled, entryno != nil);

	   ret = UI::UserInput();
	   entryno = UI::QueryWidget(`id(`fstable), `CurrentItem);

	   if (ret == `newbut)
	   {
	       map entry = GetFstabEntry (nil, union (Nfs::non_nfs_entries, nfs_entries));

	       if (entry != nil)
		   nfs_entries = add (nfs_entries, entry);

	       UI::ChangeWidget (`id(`fstable), `Items, FstabTableItems (nfs_entries));
	   }
	   else if (ret == `editbut)
	   {
		   integer count = 0;
		   map entry = GetFstabEntry (select (nfs_entries, entryno, $[]), // Default values
					      union (Nfs::non_nfs_entries, remove (nfs_entries, entryno)));
		   if (entry != nil)
		   {
		       integer count = 0;
		       nfs_entries = maplist(`ent, nfs_entries, ``{
			   count = count+1;
			   if (count-1 != entryno)
			   return ent;
			   return entry;
		       });

		       UI::ChangeWidget (`id(`fstable), `Items, FstabTableItems (nfs_entries));
		   }
	   }
	   else if (ret == `delbut && size (nfs_entries) > 0)
	   {
		   integer count = 0;
		   nfs_entries = remove (nfs_entries, entryno);

		   UI::ChangeWidget (`id(`fstable), `Items, FstabTableItems (nfs_entries));
	   }
	   else if (ret == `abort && !UI::ReallyAbortPopup (true))
	   {
	       continue;
	   }
	}
	while (ret != `back && ret != `next && ret != `abort);

	if (ret == `next)
	{
	    Nfs::nfs_entries = nfs_entries;
	}

	return ret;
    }


    /**
     * Last confirmation dialog to use with sequencer
     * @return `back or `finish
     */
    global define symbol SaveDialog () ``{

	string message = _("The entered values will be written now.
Do you really want to use the new settings?");

	if (UI::YesNoPopup (message))
	{
	    return `finish;
	}

	return `back;
    }
}
